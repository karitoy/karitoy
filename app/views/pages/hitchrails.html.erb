				<div class="body_text">
					<h2>Hitching a ride on Rails</h2>
					(or a rather warped personal history of Java)
					<br /><br />
					In the beginning there was Java: cool, sleek, elegant. It was the rage. It was the answer. With all the hype 
					surrounding it all over the web, I was intrigued. I found it quite verbose but I welcomed the change after the 
					terseness of C. I wanted to learn an object-oriented language and C++ seemed the logical choice. Although Java 
					was agonizingly slow, I opted for it rather than keep track of pointers, memory handling, new and delete and 
					constructors and destructors. Besides, I didn't know whether one can write a browser-based applet in C++. And 
					Java also looked like C.
					<br /><br />
					After a while they came up with Java 1.1. They needed to reimplement the event-handling heirarchy, they said. 
					Then they presented Swing. And after more changes they called it Java 2. Yet the JDK names remained 1.2.1, 1.2.2,
					1.3.0, etc. So we ordinary mortals have to be on our toes to keep up with developments on top of the confusing JDK 
					names. We have to unlearn old ways and learn new ones. There was a lot of difference between a Java 1.0 code and the 
					newer versions. And I have to get used to an unfamiliar word: deprecate. 
					<br /><br />
					At first it was exciting. JDBC was mind-boggling! At last, Java does data! and they did so simply! that menas no more 
					text files using RandomAccessFile to mimic a table. Servlets were awesome, but JSPs were even better! Painless web 
					development in Java! Wow!
					<br /><br />
					Then they split Java into J2SE and J2EE. And with J2EE came a truckload of new things to know. And frameworks kept 
					popping up all over the place. My mind was already reeling with the barrage of new technologies and ideas to 
					understand and master. I was hoping they would stop making new things so I can get my bearings and start learning existing ones.
					<br /><br />
					Then came the .Net juggernaut. When a certain CEO from Redmond announced the sterling qualities of .Net and that 
					he is willing to bet the house on it, you can almost hear the collective smirk of the higher echelons of the Java 
					community. After all, Java was well-entrenched with all the important industry names backing it. The Java community 
					was expecting the .Net platform to founder from lack of industry support. When just a few short years later it became 
					clear that .Net isn't sinking but is in fact consistently gaining market share (and mindshare!), the Java gods in 
					their Olympian pedestals were rattled. I was upbeat. Now they will really make an effort to streamline Java and make 
					it simpler. It will really be Java's renaissance! 
					<br /><br />
					So the Java gods marshaled their champions to respond to the .Net onslaught, and the champions delivered. They gave 
					C# the once-over, then trumpeted the exciting enhancements to the Java language such as generics, autoboxing, enhanced 
					loops, annotations, enumerations, etc. I was stunned. Java was already so complex and yet they managed to add to the 
					complexity even more! I wanted to cry out: what's the point?! You wonder where the gods get their inspiration. Perhaps 
					the rarefied air in their dizzying heights gives them insights incomprehensible to us mere mortals. 
					<br /><br />
					It is the IDE, for chrissakes! Visual Studio.Net is so easy to use and so productive that the language you use is 
					irrelevant. That's why you have several languages sharing the same IDE! You can put together a decent application 
					with a passable user interface in a matter of days. Until now, there is nothing in the Java world that comes close 
					to it (Creator is a joke -- and years late). You can create a web application, drag a data table into a web form, 
					and see your database data live even without testing yet! And test your application in a browser while still in the IDE! 
					.Net offers a complete, clean and lean stack from the front end to the back end. Instead of simplifying the Java stack 
					or perhaps crafting an IDE that will equal if not surpass Visual Studio.Net, the Java gods changed the language!! 
					<br /><br /> 
					But .Net doesn't scale, the gods say in their infinitely superior wisdom. .Net isn't enterprise-class. If you want 
					a RAD style of development that's meant for simple applications, go to .Net. If you want to create real enterprise 
					applications, use Java. So the gods went their merry way of continuously 'enhancing' the platform.
					<br /><br />
					Despite the obvious benefits of Visual Studio.Net, the legions of Visual Basic programmers were not happy with the 
					treatment given to Visual Basic. In its initial form, VB was haphazardly retrofitted into the .Net platform. It was 
					obvious Microsoft wanted everybody to use C#. They didn't like that. Perhaps it was time to migrate to Java and dump 
					Microsoft in the process. But when they tried, they found what Java programmers have had to put up with all this time. 
					They have to grapple with a complex, ever-changing language, then have to master a whole raft of overlapping - often 
					competing -	technologies before they can create an application: JSP, servlets, JSF, XML, JDBC, EJB, JavaBeans, Tomcat, 
					JBoss, Velocity, Struts, Hibernate, Spring, AWT, Swing, SWT, and what have you. And these are just a few. And they have 
					to keep track of the different versions of each if they want their application to work without a hitch. With no end in 
					sight to the latest and greatest technology being churned out by the gods. Battered and bruised, the VB crowd all came 
					limping back to .Net.
					<br /><br />
					Although I keep pining for the simpler days of Java, I realize it is hopeless. The compelling reason for using Java, 
					simplicity, has long been gone. I see no end to the complexity. What I want to see is a Java platform with a language
					as simple as the 1.0 syntax plus the JDBC, Collections, I/O, servlet/JSP and applet libraries (I'll take care of 
					the MVC, thank you very much). The rest of the ever-expanding mountain range of libraries I doubt if I will ever use 
					in my lifetime. And frameworks, instead of making life simpler, only made things more complicated: you spend time 
					configuring things to make them work together on top of your coding. The profusion of frameworks vying to be the 
					standard only led to no standards. I have no desire to wade through this morass of frameworks to mix and match. The 
					Java gods will never understand what mortals like me really need and will listen only to other gods and gurus with the 
					most obscure programming problems to solve. 
					<br /><br />
					So when David Heinemeier Hansson released Ruby On Rails, I think it came at the right moment. We were looking for a 
					simpler, saner, back-to-basics alternative. The continuing hemorrhage from the Java camp into the Rails platform 
					points this out. 
					<br /><br />
					But Rails doesn't scale, the Java stalwarts say. Rails isn't enterprise-class. If you want code-generation style of 
					development for simple applications, go to Rails. If you want scaleable and robust enterprise applications, use Java. 
					So they will keep riding the ever-changing platform into the sunset of irrelevance. 
					<br /><br />
					Perhaps it takes the freshness of youth to come up with a new way of doing things (although in the programming 
					world, 26-year-olds could hardly be considered fresh, but I am comparing Hansson to the bearded gods of Java). 
					With the steady stream of converts from the Java camp into the Rails platform, perhaps the Java gods will start 
					to listen. But by then it may be too late; by then we would have been happily riding the Rails express.
				</div>
